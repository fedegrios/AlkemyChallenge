// <auto-generated />
using System;
using Infraestructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220303135302_Weight field add to character")]
    partial class Weightfieldaddtocharacter
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CharacterCharacterMovie", b =>
                {
                    b.Property<int>("CharactersId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterMoviesCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterMoviesMovieId")
                        .HasColumnType("int");

                    b.HasKey("CharactersId", "CharacterMoviesCharacterId", "CharacterMoviesMovieId");

                    b.HasIndex("CharacterMoviesCharacterId", "CharacterMoviesMovieId");

                    b.ToTable("CharacterCharacterMovie");
                });

            modelBuilder.Entity("CharacterMovieMovie", b =>
                {
                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.Property<int>("CharactersMuvieCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("CharactersMuvieMovieId")
                        .HasColumnType("int");

                    b.HasKey("MoviesId", "CharactersMuvieCharacterId", "CharactersMuvieMovieId");

                    b.HasIndex("CharactersMuvieCharacterId", "CharactersMuvieMovieId");

                    b.ToTable("CharacterMovieMovie");
                });

            modelBuilder.Entity("Domain.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Domain.CharacterMovie", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "MovieId");

                    b.ToTable("CharacterMovies");
                });

            modelBuilder.Entity("Domain.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Domain.GenreMovie", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "MovieId");

                    b.ToTable("GenreMovies");
                });

            modelBuilder.Entity("Domain.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("GenreGenreMovie", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<int>("GenreMoviesGenreId")
                        .HasColumnType("int");

                    b.Property<int>("GenreMoviesMovieId")
                        .HasColumnType("int");

                    b.HasKey("GenresId", "GenreMoviesGenreId", "GenreMoviesMovieId");

                    b.HasIndex("GenreMoviesGenreId", "GenreMoviesMovieId");

                    b.ToTable("GenreGenreMovie");
                });

            modelBuilder.Entity("GenreMovieMovie", b =>
                {
                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.Property<int>("GenresMuvieGenreId")
                        .HasColumnType("int");

                    b.Property<int>("GenresMuvieMovieId")
                        .HasColumnType("int");

                    b.HasKey("MoviesId", "GenresMuvieGenreId", "GenresMuvieMovieId");

                    b.HasIndex("GenresMuvieGenreId", "GenresMuvieMovieId");

                    b.ToTable("GenreMovieMovie");
                });

            modelBuilder.Entity("CharacterCharacterMovie", b =>
                {
                    b.HasOne("Domain.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.CharacterMovie", null)
                        .WithMany()
                        .HasForeignKey("CharacterMoviesCharacterId", "CharacterMoviesMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterMovieMovie", b =>
                {
                    b.HasOne("Domain.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.CharacterMovie", null)
                        .WithMany()
                        .HasForeignKey("CharactersMuvieCharacterId", "CharactersMuvieMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreGenreMovie", b =>
                {
                    b.HasOne("Domain.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.GenreMovie", null)
                        .WithMany()
                        .HasForeignKey("GenreMoviesGenreId", "GenreMoviesMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreMovieMovie", b =>
                {
                    b.HasOne("Domain.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.GenreMovie", null)
                        .WithMany()
                        .HasForeignKey("GenresMuvieGenreId", "GenresMuvieMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
